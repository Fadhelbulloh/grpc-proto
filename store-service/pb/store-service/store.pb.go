// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.3
// source: store-service/store.proto

package grpc_protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetStoreByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetStoreByIDRequest) Reset() {
	*x = GetStoreByIDRequest{}
	mi := &file_store_service_store_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoreByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoreByIDRequest) ProtoMessage() {}

func (x *GetStoreByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoreByIDRequest.ProtoReflect.Descriptor instead.
func (*GetStoreByIDRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{0}
}

func (x *GetStoreByIDRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetStoreByStoreCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreCode string `protobuf:"bytes,1,opt,name=store_code,json=storeCode,proto3" json:"store_code,omitempty"`
}

func (x *GetStoreByStoreCodeRequest) Reset() {
	*x = GetStoreByStoreCodeRequest{}
	mi := &file_store_service_store_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoreByStoreCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoreByStoreCodeRequest) ProtoMessage() {}

func (x *GetStoreByStoreCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoreByStoreCodeRequest.ProtoReflect.Descriptor instead.
func (*GetStoreByStoreCodeRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{1}
}

func (x *GetStoreByStoreCodeRequest) GetStoreCode() string {
	if x != nil {
		return x.StoreCode
	}
	return ""
}

type GetStoreByIDAndAgentIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AgentId int32 `protobuf:"varint,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *GetStoreByIDAndAgentIDRequest) Reset() {
	*x = GetStoreByIDAndAgentIDRequest{}
	mi := &file_store_service_store_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoreByIDAndAgentIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoreByIDAndAgentIDRequest) ProtoMessage() {}

func (x *GetStoreByIDAndAgentIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoreByIDAndAgentIDRequest.ProtoReflect.Descriptor instead.
func (*GetStoreByIDAndAgentIDRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{2}
}

func (x *GetStoreByIDAndAgentIDRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetStoreByIDAndAgentIDRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

type GetAllTokoDBORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address         string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ContactName     string `protobuf:"bytes,3,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	MainMobilePhone string `protobuf:"bytes,4,opt,name=main_mobile_phone,json=mainMobilePhone,proto3" json:"main_mobile_phone,omitempty"`
	Code            string `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetAllTokoDBORequest) Reset() {
	*x = GetAllTokoDBORequest{}
	mi := &file_store_service_store_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllTokoDBORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTokoDBORequest) ProtoMessage() {}

func (x *GetAllTokoDBORequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTokoDBORequest.ProtoReflect.Descriptor instead.
func (*GetAllTokoDBORequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllTokoDBORequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAllTokoDBORequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetAllTokoDBORequest) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *GetAllTokoDBORequest) GetMainMobilePhone() string {
	if x != nil {
		return x.MainMobilePhone
	}
	return ""
}

func (x *GetAllTokoDBORequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetAllTokoForSalesmanDBORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address         string  `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ContactName     string  `protobuf:"bytes,3,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	MainMobilePhone string  `protobuf:"bytes,4,opt,name=main_mobile_phone,json=mainMobilePhone,proto3" json:"main_mobile_phone,omitempty"`
	Code            string  `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	ProvinceId      int32   `protobuf:"varint,6,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	CityId          int32   `protobuf:"varint,7,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	DistrictId      int32   `protobuf:"varint,8,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	VillageId       int32   `protobuf:"varint,9,opt,name=village_id,json=villageId,proto3" json:"village_id,omitempty"`
	StoreCategory   string  `protobuf:"bytes,10,opt,name=store_category,json=storeCategory,proto3" json:"store_category,omitempty"`
	Status          string  `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Email           string  `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	IsVerified      string  `protobuf:"bytes,13,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	AgentId         []int32 `protobuf:"varint,14,rep,packed,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Prospect        string  `protobuf:"bytes,15,opt,name=prospect,proto3" json:"prospect,omitempty"`
	Type            string  `protobuf:"bytes,16,opt,name=type,proto3" json:"type,omitempty"`
	Page            int32   `protobuf:"varint,17,opt,name=page,proto3" json:"page,omitempty"`
	PerPage         int32   `protobuf:"varint,18,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	SortType        string  `protobuf:"bytes,19,opt,name=sort_type,json=sortType,proto3" json:"sort_type,omitempty"`
	CountOnly       bool    `protobuf:"varint,20,opt,name=count_only,json=countOnly,proto3" json:"count_only,omitempty"`
}

func (x *GetAllTokoForSalesmanDBORequest) Reset() {
	*x = GetAllTokoForSalesmanDBORequest{}
	mi := &file_store_service_store_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllTokoForSalesmanDBORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTokoForSalesmanDBORequest) ProtoMessage() {}

func (x *GetAllTokoForSalesmanDBORequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTokoForSalesmanDBORequest.ProtoReflect.Descriptor instead.
func (*GetAllTokoForSalesmanDBORequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllTokoForSalesmanDBORequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetMainMobilePhone() string {
	if x != nil {
		return x.MainMobilePhone
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetProvinceId() int32 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *GetAllTokoForSalesmanDBORequest) GetCityId() int32 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *GetAllTokoForSalesmanDBORequest) GetDistrictId() int32 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *GetAllTokoForSalesmanDBORequest) GetVillageId() int32 {
	if x != nil {
		return x.VillageId
	}
	return 0
}

func (x *GetAllTokoForSalesmanDBORequest) GetStoreCategory() string {
	if x != nil {
		return x.StoreCategory
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetIsVerified() string {
	if x != nil {
		return x.IsVerified
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetAgentId() []int32 {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *GetAllTokoForSalesmanDBORequest) GetProspect() string {
	if x != nil {
		return x.Prospect
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllTokoForSalesmanDBORequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *GetAllTokoForSalesmanDBORequest) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

func (x *GetAllTokoForSalesmanDBORequest) GetCountOnly() bool {
	if x != nil {
		return x.CountOnly
	}
	return false
}

type GetAllPengajuanTokoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address         string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ContactName     string `protobuf:"bytes,3,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	MainMobilePhone string `protobuf:"bytes,4,opt,name=main_mobile_phone,json=mainMobilePhone,proto3" json:"main_mobile_phone,omitempty"`
}

func (x *GetAllPengajuanTokoRequest) Reset() {
	*x = GetAllPengajuanTokoRequest{}
	mi := &file_store_service_store_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllPengajuanTokoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPengajuanTokoRequest) ProtoMessage() {}

func (x *GetAllPengajuanTokoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPengajuanTokoRequest.ProtoReflect.Descriptor instead.
func (*GetAllPengajuanTokoRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllPengajuanTokoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAllPengajuanTokoRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetAllPengajuanTokoRequest) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *GetAllPengajuanTokoRequest) GetMainMobilePhone() string {
	if x != nil {
		return x.MainMobilePhone
	}
	return ""
}

type StoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StoreCode         string `protobuf:"bytes,2,opt,name=store_code,json=storeCode,proto3" json:"store_code,omitempty"`
	StoreCategoryId   int32  `protobuf:"varint,3,opt,name=store_category_id,json=storeCategoryId,proto3" json:"store_category_id,omitempty"`
	StoreCategoryName string `protobuf:"bytes,4,opt,name=store_category_name,json=storeCategoryName,proto3" json:"store_category_name,omitempty"`
	Name              string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Address           string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	ProvinceId        string `protobuf:"bytes,7,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	ProvinceName      string `protobuf:"bytes,8,opt,name=province_name,json=provinceName,proto3" json:"province_name,omitempty"`
	CityId            string `protobuf:"bytes,9,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	CityName          string `protobuf:"bytes,10,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	DistrictId        string `protobuf:"bytes,11,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	DistrictName      string `protobuf:"bytes,12,opt,name=district_name,json=districtName,proto3" json:"district_name,omitempty"`
	VillageId         string `protobuf:"bytes,13,opt,name=village_id,json=villageId,proto3" json:"village_id,omitempty"`
	VillageName       string `protobuf:"bytes,14,opt,name=village_name,json=villageName,proto3" json:"village_name,omitempty"`
	Status            string `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	AgentId           int32  `protobuf:"varint,16,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AliasName         string `protobuf:"bytes,17,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	AliasCode         string `protobuf:"bytes,18,opt,name=alias_code,json=aliasCode,proto3" json:"alias_code,omitempty"`
	Phone             string `protobuf:"bytes,19,opt,name=phone,proto3" json:"phone,omitempty"`
	ContactName       string `protobuf:"bytes,20,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	StatusPengajuan   string `protobuf:"bytes,21,opt,name=status_pengajuan,json=statusPengajuan,proto3" json:"status_pengajuan,omitempty"`
	MainMobilePhone   string `protobuf:"bytes,22,opt,name=main_mobile_phone,json=mainMobilePhone,proto3" json:"main_mobile_phone,omitempty"`
	Email             string `protobuf:"bytes,23,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerified     int32  `protobuf:"varint,24,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
	Description       string `protobuf:"bytes,25,opt,name=description,proto3" json:"description,omitempty"`
	DataType          string `protobuf:"bytes,26,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	PostalCode        string `protobuf:"bytes,27,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	GLat              string `protobuf:"bytes,28,opt,name=g_lat,json=gLat,proto3" json:"g_lat,omitempty"`
	GLng              string `protobuf:"bytes,29,opt,name=g_lng,json=gLng,proto3" json:"g_lng,omitempty"`
	Website           string `protobuf:"bytes,30,opt,name=website,proto3" json:"website,omitempty"`
	DBOApprovalStatus string `protobuf:"bytes,31,opt,name=DBOApprovalStatus,proto3" json:"DBOApprovalStatus,omitempty"`
	VerifiedDbo       string `protobuf:"bytes,32,opt,name=verified_dbo,json=verifiedDbo,proto3" json:"verified_dbo,omitempty"`
	VerifiedDate      string `protobuf:"bytes,33,opt,name=verified_date,json=verifiedDate,proto3" json:"verified_date,omitempty"`
	ValidationStore   string `protobuf:"bytes,34,opt,name=validation_store,json=validationStore,proto3" json:"validation_store,omitempty"`
	Channel           string `protobuf:"bytes,35,opt,name=channel,proto3" json:"channel,omitempty"`
	StoresCategory    string `protobuf:"bytes,36,opt,name=stores_category,json=storesCategory,proto3" json:"stores_category,omitempty"`
	AlternatePhone_1  string `protobuf:"bytes,37,opt,name=alternate_phone_1,json=alternatePhone1,proto3" json:"alternate_phone_1,omitempty"`
	AlternatePhone_2  string `protobuf:"bytes,38,opt,name=alternate_phone_2,json=alternatePhone2,proto3" json:"alternate_phone_2,omitempty"`
	YearEstablished   string `protobuf:"bytes,39,opt,name=year_established,json=yearEstablished,proto3" json:"year_established,omitempty"`
	NoNpwp            string `protobuf:"bytes,40,opt,name=no_npwp,json=noNpwp,proto3" json:"no_npwp,omitempty"`
	MappingStoreId    string `protobuf:"bytes,41,opt,name=mapping_store_id,json=mappingStoreId,proto3" json:"mapping_store_id,omitempty"`
	DateMyStore       string `protobuf:"bytes,42,opt,name=date_my_store,json=dateMyStore,proto3" json:"date_my_store,omitempty"`
	Total             int32  `protobuf:"varint,43,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *StoreResponse) Reset() {
	*x = StoreResponse{}
	mi := &file_store_service_store_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreResponse) ProtoMessage() {}

func (x *StoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreResponse.ProtoReflect.Descriptor instead.
func (*StoreResponse) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{6}
}

func (x *StoreResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StoreResponse) GetStoreCode() string {
	if x != nil {
		return x.StoreCode
	}
	return ""
}

func (x *StoreResponse) GetStoreCategoryId() int32 {
	if x != nil {
		return x.StoreCategoryId
	}
	return 0
}

func (x *StoreResponse) GetStoreCategoryName() string {
	if x != nil {
		return x.StoreCategoryName
	}
	return ""
}

func (x *StoreResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoreResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *StoreResponse) GetProvinceId() string {
	if x != nil {
		return x.ProvinceId
	}
	return ""
}

func (x *StoreResponse) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *StoreResponse) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *StoreResponse) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *StoreResponse) GetDistrictId() string {
	if x != nil {
		return x.DistrictId
	}
	return ""
}

func (x *StoreResponse) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *StoreResponse) GetVillageId() string {
	if x != nil {
		return x.VillageId
	}
	return ""
}

func (x *StoreResponse) GetVillageName() string {
	if x != nil {
		return x.VillageName
	}
	return ""
}

func (x *StoreResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StoreResponse) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *StoreResponse) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *StoreResponse) GetAliasCode() string {
	if x != nil {
		return x.AliasCode
	}
	return ""
}

func (x *StoreResponse) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *StoreResponse) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *StoreResponse) GetStatusPengajuan() string {
	if x != nil {
		return x.StatusPengajuan
	}
	return ""
}

func (x *StoreResponse) GetMainMobilePhone() string {
	if x != nil {
		return x.MainMobilePhone
	}
	return ""
}

func (x *StoreResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *StoreResponse) GetEmailVerified() int32 {
	if x != nil {
		return x.EmailVerified
	}
	return 0
}

func (x *StoreResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StoreResponse) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *StoreResponse) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *StoreResponse) GetGLat() string {
	if x != nil {
		return x.GLat
	}
	return ""
}

func (x *StoreResponse) GetGLng() string {
	if x != nil {
		return x.GLng
	}
	return ""
}

func (x *StoreResponse) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *StoreResponse) GetDBOApprovalStatus() string {
	if x != nil {
		return x.DBOApprovalStatus
	}
	return ""
}

func (x *StoreResponse) GetVerifiedDbo() string {
	if x != nil {
		return x.VerifiedDbo
	}
	return ""
}

func (x *StoreResponse) GetVerifiedDate() string {
	if x != nil {
		return x.VerifiedDate
	}
	return ""
}

func (x *StoreResponse) GetValidationStore() string {
	if x != nil {
		return x.ValidationStore
	}
	return ""
}

func (x *StoreResponse) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *StoreResponse) GetStoresCategory() string {
	if x != nil {
		return x.StoresCategory
	}
	return ""
}

func (x *StoreResponse) GetAlternatePhone_1() string {
	if x != nil {
		return x.AlternatePhone_1
	}
	return ""
}

func (x *StoreResponse) GetAlternatePhone_2() string {
	if x != nil {
		return x.AlternatePhone_2
	}
	return ""
}

func (x *StoreResponse) GetYearEstablished() string {
	if x != nil {
		return x.YearEstablished
	}
	return ""
}

func (x *StoreResponse) GetNoNpwp() string {
	if x != nil {
		return x.NoNpwp
	}
	return ""
}

func (x *StoreResponse) GetMappingStoreId() string {
	if x != nil {
		return x.MappingStoreId
	}
	return ""
}

func (x *StoreResponse) GetDateMyStore() string {
	if x != nil {
		return x.DateMyStore
	}
	return ""
}

func (x *StoreResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type StoreErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	SystemMessage string `protobuf:"bytes,2,opt,name=system_message,json=systemMessage,proto3" json:"system_message,omitempty"`
	StatusCode    int32  `protobuf:"varint,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *StoreErrorResponse) Reset() {
	*x = StoreErrorResponse{}
	mi := &file_store_service_store_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreErrorResponse) ProtoMessage() {}

func (x *StoreErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreErrorResponse.ProtoReflect.Descriptor instead.
func (*StoreErrorResponse) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{7}
}

func (x *StoreErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StoreErrorResponse) GetSystemMessage() string {
	if x != nil {
		return x.SystemMessage
	}
	return ""
}

func (x *StoreErrorResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type GetStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32               `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Data       *StoreResponse      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Error      *StoreErrorResponse `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetStoreResponse) Reset() {
	*x = GetStoreResponse{}
	mi := &file_store_service_store_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoreResponse) ProtoMessage() {}

func (x *GetStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoreResponse.ProtoReflect.Descriptor instead.
func (*GetStoreResponse) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{8}
}

func (x *GetStoreResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetStoreResponse) GetData() *StoreResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetStoreResponse) GetError() *StoreErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetStoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32               `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Data       []*StoreResponse    `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Total      int32               `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Error      *StoreErrorResponse `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetStoresResponse) Reset() {
	*x = GetStoresResponse{}
	mi := &file_store_service_store_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoresResponse) ProtoMessage() {}

func (x *GetStoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoresResponse.ProtoReflect.Descriptor instead.
func (*GetStoresResponse) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{9}
}

func (x *GetStoresResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetStoresResponse) GetData() []*StoreResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetStoresResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetStoresResponse) GetError() *StoreErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetIsMatchStoreAndAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId int32 `protobuf:"varint,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	AgentId int32 `protobuf:"varint,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *GetIsMatchStoreAndAgentRequest) Reset() {
	*x = GetIsMatchStoreAndAgentRequest{}
	mi := &file_store_service_store_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIsMatchStoreAndAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIsMatchStoreAndAgentRequest) ProtoMessage() {}

func (x *GetIsMatchStoreAndAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIsMatchStoreAndAgentRequest.ProtoReflect.Descriptor instead.
func (*GetIsMatchStoreAndAgentRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{10}
}

func (x *GetIsMatchStoreAndAgentRequest) GetStoreId() int32 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *GetIsMatchStoreAndAgentRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

type GetIsMatchStoreAndAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMatch    bool                `protobuf:"varint,1,opt,name=is_match,json=isMatch,proto3" json:"is_match,omitempty"`
	StatusCode int32               `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Error      *StoreErrorResponse `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetIsMatchStoreAndAgentResponse) Reset() {
	*x = GetIsMatchStoreAndAgentResponse{}
	mi := &file_store_service_store_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIsMatchStoreAndAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIsMatchStoreAndAgentResponse) ProtoMessage() {}

func (x *GetIsMatchStoreAndAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIsMatchStoreAndAgentResponse.ProtoReflect.Descriptor instead.
func (*GetIsMatchStoreAndAgentResponse) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{11}
}

func (x *GetIsMatchStoreAndAgentResponse) GetIsMatch() bool {
	if x != nil {
		return x.IsMatch
	}
	return false
}

func (x *GetIsMatchStoreAndAgentResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetIsMatchStoreAndAgentResponse) GetError() *StoreErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetStoreByStoreAliasCodeFromMappingStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId        int32  `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	StoreAliasCode string `protobuf:"bytes,2,opt,name=store_alias_code,json=storeAliasCode,proto3" json:"store_alias_code,omitempty"`
}

func (x *GetStoreByStoreAliasCodeFromMappingStoreRequest) Reset() {
	*x = GetStoreByStoreAliasCodeFromMappingStoreRequest{}
	mi := &file_store_service_store_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoreByStoreAliasCodeFromMappingStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoreByStoreAliasCodeFromMappingStoreRequest) ProtoMessage() {}

func (x *GetStoreByStoreAliasCodeFromMappingStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoreByStoreAliasCodeFromMappingStoreRequest.ProtoReflect.Descriptor instead.
func (*GetStoreByStoreAliasCodeFromMappingStoreRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{12}
}

func (x *GetStoreByStoreAliasCodeFromMappingStoreRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *GetStoreByStoreAliasCodeFromMappingStoreRequest) GetStoreAliasCode() string {
	if x != nil {
		return x.StoreAliasCode
	}
	return ""
}

type CheckBlacklistedStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId int32 `protobuf:"varint,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	AgentId int32 `protobuf:"varint,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	BrandId int32 `protobuf:"varint,3,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
}

func (x *CheckBlacklistedStoreRequest) Reset() {
	*x = CheckBlacklistedStoreRequest{}
	mi := &file_store_service_store_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckBlacklistedStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBlacklistedStoreRequest) ProtoMessage() {}

func (x *CheckBlacklistedStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBlacklistedStoreRequest.ProtoReflect.Descriptor instead.
func (*CheckBlacklistedStoreRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{13}
}

func (x *CheckBlacklistedStoreRequest) GetStoreId() int32 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *CheckBlacklistedStoreRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *CheckBlacklistedStoreRequest) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

type CheckBlacklistedStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlacklisted bool                `protobuf:"varint,1,opt,name=is_blacklisted,json=isBlacklisted,proto3" json:"is_blacklisted,omitempty"`
	StatusCode    int32               `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Error         *StoreErrorResponse `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	IsInactive    bool                `protobuf:"varint,4,opt,name=is_inactive,json=isInactive,proto3" json:"is_inactive,omitempty"`
}

func (x *CheckBlacklistedStoreResponse) Reset() {
	*x = CheckBlacklistedStoreResponse{}
	mi := &file_store_service_store_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckBlacklistedStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBlacklistedStoreResponse) ProtoMessage() {}

func (x *CheckBlacklistedStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBlacklistedStoreResponse.ProtoReflect.Descriptor instead.
func (*CheckBlacklistedStoreResponse) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{14}
}

func (x *CheckBlacklistedStoreResponse) GetIsBlacklisted() bool {
	if x != nil {
		return x.IsBlacklisted
	}
	return false
}

func (x *CheckBlacklistedStoreResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *CheckBlacklistedStoreResponse) GetError() *StoreErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CheckBlacklistedStoreResponse) GetIsInactive() bool {
	if x != nil {
		return x.IsInactive
	}
	return false
}

type GetStoreByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids     []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	AgentId int32   `protobuf:"varint,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *GetStoreByIDsRequest) Reset() {
	*x = GetStoreByIDsRequest{}
	mi := &file_store_service_store_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoreByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoreByIDsRequest) ProtoMessage() {}

func (x *GetStoreByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoreByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetStoreByIDsRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{15}
}

func (x *GetStoreByIDsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetStoreByIDsRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

type GetStoreByIDsWithoutAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetStoreByIDsWithoutAgentRequest) Reset() {
	*x = GetStoreByIDsWithoutAgentRequest{}
	mi := &file_store_service_store_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoreByIDsWithoutAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoreByIDsWithoutAgentRequest) ProtoMessage() {}

func (x *GetStoreByIDsWithoutAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoreByIDsWithoutAgentRequest.ProtoReflect.Descriptor instead.
func (*GetStoreByIDsWithoutAgentRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{16}
}

func (x *GetStoreByIDsWithoutAgentRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetStoreByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*Store            `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	StatusCode int32               `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Error      *StoreErrorResponse `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetStoreByIDsResponse) Reset() {
	*x = GetStoreByIDsResponse{}
	mi := &file_store_service_store_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoreByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoreByIDsResponse) ProtoMessage() {}

func (x *GetStoreByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoreByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetStoreByIDsResponse) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{17}
}

func (x *GetStoreByIDsResponse) GetData() []*Store {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetStoreByIDsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetStoreByIDsResponse) GetError() *StoreErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetAllStoreByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids     []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	AgentId int32   `protobuf:"varint,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *GetAllStoreByIDsRequest) Reset() {
	*x = GetAllStoreByIDsRequest{}
	mi := &file_store_service_store_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllStoreByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStoreByIDsRequest) ProtoMessage() {}

func (x *GetAllStoreByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStoreByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetAllStoreByIDsRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{18}
}

func (x *GetAllStoreByIDsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetAllStoreByIDsRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

type GetAllStoreByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*Store            `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	StatusCode int32               `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Error      *StoreErrorResponse `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetAllStoreByIDsResponse) Reset() {
	*x = GetAllStoreByIDsResponse{}
	mi := &file_store_service_store_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllStoreByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStoreByIDsResponse) ProtoMessage() {}

func (x *GetAllStoreByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStoreByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetAllStoreByIDsResponse) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{19}
}

func (x *GetAllStoreByIDsResponse) GetData() []*Store {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllStoreByIDsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetAllStoreByIDsResponse) GetError() *StoreErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StoreCode                   string     `protobuf:"bytes,2,opt,name=store_code,json=storeCode,proto3" json:"store_code,omitempty"`
	StoreCategoryId             int32      `protobuf:"varint,3,opt,name=store_category_id,json=storeCategoryId,proto3" json:"store_category_id,omitempty"`
	StoreCategoryName           string     `protobuf:"bytes,4,opt,name=store_category_name,json=storeCategoryName,proto3" json:"store_category_name,omitempty"`
	StoreCategorySlug           string     `protobuf:"bytes,5,opt,name=store_category_slug,json=storeCategorySlug,proto3" json:"store_category_slug,omitempty"`
	StoreCategoryStatus         string     `protobuf:"bytes,6,opt,name=store_category_status,json=storeCategoryStatus,proto3" json:"store_category_status,omitempty"`
	Name                        string     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Email                       string     `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerified               int64      `protobuf:"varint,9,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
	Description                 string     `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Address                     string     `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
	ProvinceId                  int64      `protobuf:"varint,12,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	ProvinceName                string     `protobuf:"bytes,13,opt,name=province_name,json=provinceName,proto3" json:"province_name,omitempty"`
	CityId                      int64      `protobuf:"varint,14,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	CityName                    string     `protobuf:"bytes,15,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	DistrictId                  int64      `protobuf:"varint,16,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	DistrictName                string     `protobuf:"bytes,17,opt,name=district_name,json=districtName,proto3" json:"district_name,omitempty"`
	VillageId                   int64      `protobuf:"varint,18,opt,name=village_id,json=villageId,proto3" json:"village_id,omitempty"`
	VillageName                 string     `protobuf:"bytes,19,opt,name=village_name,json=villageName,proto3" json:"village_name,omitempty"`
	DataType                    string     `protobuf:"bytes,20,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	PostalCode                  string     `protobuf:"bytes,21,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	GPlaceId                    string     `protobuf:"bytes,22,opt,name=g_place_id,json=gPlaceId,proto3" json:"g_place_id,omitempty"`
	GLat                        string     `protobuf:"bytes,23,opt,name=g_lat,json=gLat,proto3" json:"g_lat,omitempty"`
	GLng                        string     `protobuf:"bytes,24,opt,name=g_lng,json=gLng,proto3" json:"g_lng,omitempty"`
	ContactName                 string     `protobuf:"bytes,25,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	Website                     string     `protobuf:"bytes,26,opt,name=website,proto3" json:"website,omitempty"`
	Phone                       string     `protobuf:"bytes,27,opt,name=phone,proto3" json:"phone,omitempty"`
	MainMobilePhone             string     `protobuf:"bytes,28,opt,name=main_mobile_phone,json=mainMobilePhone,proto3" json:"main_mobile_phone,omitempty"`
	AlternatePhone_1            string     `protobuf:"bytes,29,opt,name=alternate_phone_1,json=alternatePhone1,proto3" json:"alternate_phone_1,omitempty"`
	AlternatePhone_2            string     `protobuf:"bytes,30,opt,name=alternate_phone_2,json=alternatePhone2,proto3" json:"alternate_phone_2,omitempty"`
	AlternatePhone_3            string     `protobuf:"bytes,31,opt,name=alternate_phone_3,json=alternatePhone3,proto3" json:"alternate_phone_3,omitempty"`
	YearEstablished             string     `protobuf:"bytes,32,opt,name=year_established,json=yearEstablished,proto3" json:"year_established,omitempty"`
	Status                      string     `protobuf:"bytes,33,opt,name=status,proto3" json:"status,omitempty"`
	ProofOfBusiness             string     `protobuf:"bytes,34,opt,name=proof_of_business,json=proofOfBusiness,proto3" json:"proof_of_business,omitempty"`
	IsBlacklisted               int32      `protobuf:"varint,35,opt,name=is_blacklisted,json=isBlacklisted,proto3" json:"is_blacklisted,omitempty"`
	NoNpwp                      string     `protobuf:"bytes,36,opt,name=no_npwp,json=noNpwp,proto3" json:"no_npwp,omitempty"`
	ImageNpwp                   string     `protobuf:"bytes,37,opt,name=image_npwp,json=imageNpwp,proto3" json:"image_npwp,omitempty"`
	NpSiup                      string     `protobuf:"bytes,38,opt,name=np_siup,json=npSiup,proto3" json:"np_siup,omitempty"`
	ImageSiup                   string     `protobuf:"bytes,39,opt,name=image_siup,json=imageSiup,proto3" json:"image_siup,omitempty"`
	Image                       string     `protobuf:"bytes,40,opt,name=image,proto3" json:"image,omitempty"`
	AliasName                   string     `protobuf:"bytes,41,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
	AliasCode                   string     `protobuf:"bytes,42,opt,name=alias_code,json=aliasCode,proto3" json:"alias_code,omitempty"`
	Uid                         string     `protobuf:"bytes,43,opt,name=uid,proto3" json:"uid,omitempty"`
	Creator                     string     `protobuf:"bytes,44,opt,name=creator,proto3" json:"creator,omitempty"`
	DboApprovalStatus           int64      `protobuf:"varint,45,opt,name=dbo_approval_status,json=dboApprovalStatus,proto3" json:"dbo_approval_status,omitempty"`
	AgentId                     int64      `protobuf:"varint,46,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ParentId                    int64      `protobuf:"varint,47,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	HeadId                      int64      `protobuf:"varint,48,opt,name=head_id,json=headId,proto3" json:"head_id,omitempty"`
	UseApps                     int64      `protobuf:"varint,49,opt,name=use_apps,json=useApps,proto3" json:"use_apps,omitempty"`
	AgentReference              string     `protobuf:"bytes,50,opt,name=agent_reference,json=agentReference,proto3" json:"agent_reference,omitempty"`
	UserIdCreated               int64      `protobuf:"varint,51,opt,name=user_id_created,json=userIdCreated,proto3" json:"user_id_created,omitempty"`
	UserIdUpdated               int64      `protobuf:"varint,52,opt,name=user_id_updated,json=userIdUpdated,proto3" json:"user_id_updated,omitempty"`
	StatusPengajuan             string     `protobuf:"bytes,53,opt,name=status_pengajuan,json=statusPengajuan,proto3" json:"status_pengajuan,omitempty"`
	DateSubmited                string     `protobuf:"bytes,54,opt,name=date_submited,json=dateSubmited,proto3" json:"date_submited,omitempty"`
	DateProcessed               string     `protobuf:"bytes,55,opt,name=date_processed,json=dateProcessed,proto3" json:"date_processed,omitempty"`
	ResubmitAllowed             string     `protobuf:"bytes,56,opt,name=resubmit_allowed,json=resubmitAllowed,proto3" json:"resubmit_allowed,omitempty"`
	Remarks                     string     `protobuf:"bytes,57,opt,name=remarks,proto3" json:"remarks,omitempty"`
	VerifiedDbo                 string     `protobuf:"bytes,58,opt,name=verified_dbo,json=verifiedDbo,proto3" json:"verified_dbo,omitempty"`
	VerifiedDate                string     `protobuf:"bytes,59,opt,name=verified_date,json=verifiedDate,proto3" json:"verified_date,omitempty"`
	SalesmanReferralCode        string     `protobuf:"bytes,60,opt,name=salesman_referral_code,json=salesmanReferralCode,proto3" json:"salesman_referral_code,omitempty"`
	ValidationStore             string     `protobuf:"bytes,61,opt,name=validation_store,json=validationStore,proto3" json:"validation_store,omitempty"`
	ValidationVisitation        string     `protobuf:"bytes,62,opt,name=validation_visitation,json=validationVisitation,proto3" json:"validation_visitation,omitempty"`
	Channel                     string     `protobuf:"bytes,63,opt,name=channel,proto3" json:"channel,omitempty"`
	HookStatus                  string     `protobuf:"bytes,64,opt,name=hook_status,json=hookStatus,proto3" json:"hook_status,omitempty"`
	SjFromStoreOrderCount       int32      `protobuf:"varint,65,opt,name=sj_from_store_order_count,json=sjFromStoreOrderCount,proto3" json:"sj_from_store_order_count,omitempty"`
	DateMyStore                 string     `protobuf:"bytes,66,opt,name=date_my_store,json=dateMyStore,proto3" json:"date_my_store,omitempty"`
	StatusVerificationTemporary string     `protobuf:"bytes,67,opt,name=status_verification_temporary,json=statusVerificationTemporary,proto3" json:"status_verification_temporary,omitempty"`
	StatusVerificationUser      int64      `protobuf:"varint,68,opt,name=status_verification_user,json=statusVerificationUser,proto3" json:"status_verification_user,omitempty"`
	IdKf                        string     `protobuf:"bytes,69,opt,name=id_kf,json=idKf,proto3" json:"id_kf,omitempty"`
	KfFullName                  string     `protobuf:"bytes,70,opt,name=kf_full_name,json=kfFullName,proto3" json:"kf_full_name,omitempty"`
	KfEmail                     string     `protobuf:"bytes,71,opt,name=kf_email,json=kfEmail,proto3" json:"kf_email,omitempty"`
	IsRedeem                    bool       `protobuf:"varint,72,opt,name=is_redeem,json=isRedeem,proto3" json:"is_redeem,omitempty"`
	Point                       int64      `protobuf:"varint,73,opt,name=point,proto3" json:"point,omitempty"`
	CreatedAt                   string     `protobuf:"bytes,74,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                   string     `protobuf:"bytes,75,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt                   string     `protobuf:"bytes,76,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Addresses                   []*Address `protobuf:"bytes,77,rep,name=addresses,proto3" json:"addresses,omitempty"`
	RevalidationStatus          string     `protobuf:"bytes,78,opt,name=revalidation_status,json=revalidationStatus,proto3" json:"revalidation_status,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	mi := &file_store_service_store_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{20}
}

func (x *Store) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Store) GetStoreCode() string {
	if x != nil {
		return x.StoreCode
	}
	return ""
}

func (x *Store) GetStoreCategoryId() int32 {
	if x != nil {
		return x.StoreCategoryId
	}
	return 0
}

func (x *Store) GetStoreCategoryName() string {
	if x != nil {
		return x.StoreCategoryName
	}
	return ""
}

func (x *Store) GetStoreCategorySlug() string {
	if x != nil {
		return x.StoreCategorySlug
	}
	return ""
}

func (x *Store) GetStoreCategoryStatus() string {
	if x != nil {
		return x.StoreCategoryStatus
	}
	return ""
}

func (x *Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Store) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Store) GetEmailVerified() int64 {
	if x != nil {
		return x.EmailVerified
	}
	return 0
}

func (x *Store) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Store) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Store) GetProvinceId() int64 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *Store) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *Store) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *Store) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Store) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *Store) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *Store) GetVillageId() int64 {
	if x != nil {
		return x.VillageId
	}
	return 0
}

func (x *Store) GetVillageName() string {
	if x != nil {
		return x.VillageName
	}
	return ""
}

func (x *Store) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *Store) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Store) GetGPlaceId() string {
	if x != nil {
		return x.GPlaceId
	}
	return ""
}

func (x *Store) GetGLat() string {
	if x != nil {
		return x.GLat
	}
	return ""
}

func (x *Store) GetGLng() string {
	if x != nil {
		return x.GLng
	}
	return ""
}

func (x *Store) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *Store) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Store) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Store) GetMainMobilePhone() string {
	if x != nil {
		return x.MainMobilePhone
	}
	return ""
}

func (x *Store) GetAlternatePhone_1() string {
	if x != nil {
		return x.AlternatePhone_1
	}
	return ""
}

func (x *Store) GetAlternatePhone_2() string {
	if x != nil {
		return x.AlternatePhone_2
	}
	return ""
}

func (x *Store) GetAlternatePhone_3() string {
	if x != nil {
		return x.AlternatePhone_3
	}
	return ""
}

func (x *Store) GetYearEstablished() string {
	if x != nil {
		return x.YearEstablished
	}
	return ""
}

func (x *Store) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Store) GetProofOfBusiness() string {
	if x != nil {
		return x.ProofOfBusiness
	}
	return ""
}

func (x *Store) GetIsBlacklisted() int32 {
	if x != nil {
		return x.IsBlacklisted
	}
	return 0
}

func (x *Store) GetNoNpwp() string {
	if x != nil {
		return x.NoNpwp
	}
	return ""
}

func (x *Store) GetImageNpwp() string {
	if x != nil {
		return x.ImageNpwp
	}
	return ""
}

func (x *Store) GetNpSiup() string {
	if x != nil {
		return x.NpSiup
	}
	return ""
}

func (x *Store) GetImageSiup() string {
	if x != nil {
		return x.ImageSiup
	}
	return ""
}

func (x *Store) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Store) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *Store) GetAliasCode() string {
	if x != nil {
		return x.AliasCode
	}
	return ""
}

func (x *Store) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Store) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Store) GetDboApprovalStatus() int64 {
	if x != nil {
		return x.DboApprovalStatus
	}
	return 0
}

func (x *Store) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *Store) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Store) GetHeadId() int64 {
	if x != nil {
		return x.HeadId
	}
	return 0
}

func (x *Store) GetUseApps() int64 {
	if x != nil {
		return x.UseApps
	}
	return 0
}

func (x *Store) GetAgentReference() string {
	if x != nil {
		return x.AgentReference
	}
	return ""
}

func (x *Store) GetUserIdCreated() int64 {
	if x != nil {
		return x.UserIdCreated
	}
	return 0
}

func (x *Store) GetUserIdUpdated() int64 {
	if x != nil {
		return x.UserIdUpdated
	}
	return 0
}

func (x *Store) GetStatusPengajuan() string {
	if x != nil {
		return x.StatusPengajuan
	}
	return ""
}

func (x *Store) GetDateSubmited() string {
	if x != nil {
		return x.DateSubmited
	}
	return ""
}

func (x *Store) GetDateProcessed() string {
	if x != nil {
		return x.DateProcessed
	}
	return ""
}

func (x *Store) GetResubmitAllowed() string {
	if x != nil {
		return x.ResubmitAllowed
	}
	return ""
}

func (x *Store) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Store) GetVerifiedDbo() string {
	if x != nil {
		return x.VerifiedDbo
	}
	return ""
}

func (x *Store) GetVerifiedDate() string {
	if x != nil {
		return x.VerifiedDate
	}
	return ""
}

func (x *Store) GetSalesmanReferralCode() string {
	if x != nil {
		return x.SalesmanReferralCode
	}
	return ""
}

func (x *Store) GetValidationStore() string {
	if x != nil {
		return x.ValidationStore
	}
	return ""
}

func (x *Store) GetValidationVisitation() string {
	if x != nil {
		return x.ValidationVisitation
	}
	return ""
}

func (x *Store) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Store) GetHookStatus() string {
	if x != nil {
		return x.HookStatus
	}
	return ""
}

func (x *Store) GetSjFromStoreOrderCount() int32 {
	if x != nil {
		return x.SjFromStoreOrderCount
	}
	return 0
}

func (x *Store) GetDateMyStore() string {
	if x != nil {
		return x.DateMyStore
	}
	return ""
}

func (x *Store) GetStatusVerificationTemporary() string {
	if x != nil {
		return x.StatusVerificationTemporary
	}
	return ""
}

func (x *Store) GetStatusVerificationUser() int64 {
	if x != nil {
		return x.StatusVerificationUser
	}
	return 0
}

func (x *Store) GetIdKf() string {
	if x != nil {
		return x.IdKf
	}
	return ""
}

func (x *Store) GetKfFullName() string {
	if x != nil {
		return x.KfFullName
	}
	return ""
}

func (x *Store) GetKfEmail() string {
	if x != nil {
		return x.KfEmail
	}
	return ""
}

func (x *Store) GetIsRedeem() bool {
	if x != nil {
		return x.IsRedeem
	}
	return false
}

func (x *Store) GetPoint() int64 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *Store) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Store) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Store) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Store) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Store) GetRevalidationStatus() string {
	if x != nil {
		return x.RevalidationStatus
	}
	return ""
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StoreId      int64  `protobuf:"varint,3,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	StoreCode    string `protobuf:"bytes,4,opt,name=store_code,json=storeCode,proto3" json:"store_code,omitempty"`
	StoreName    string `protobuf:"bytes,5,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	Email        string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	MobilePhone  string `protobuf:"bytes,7,opt,name=mobile_phone,json=mobilePhone,proto3" json:"mobile_phone,omitempty"`
	Phone        string `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
	PicName      string `protobuf:"bytes,9,opt,name=pic_name,json=picName,proto3" json:"pic_name,omitempty"`
	Description  string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	IsMain       int32  `protobuf:"varint,11,opt,name=is_main,json=isMain,proto3" json:"is_main,omitempty"`
	IsWarehouse  int32  `protobuf:"varint,12,opt,name=is_warehouse,json=isWarehouse,proto3" json:"is_warehouse,omitempty"`
	GLat         string `protobuf:"bytes,13,opt,name=g_lat,json=gLat,proto3" json:"g_lat,omitempty"`
	GLng         string `protobuf:"bytes,14,opt,name=g_lng,json=gLng,proto3" json:"g_lng,omitempty"`
	GPlaceId     string `protobuf:"bytes,15,opt,name=g_place_id,json=gPlaceId,proto3" json:"g_place_id,omitempty"`
	Address      string `protobuf:"bytes,16,opt,name=address,proto3" json:"address,omitempty"`
	ProvinceId   int32  `protobuf:"varint,17,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	ProvinceName string `protobuf:"bytes,18,opt,name=province_name,json=provinceName,proto3" json:"province_name,omitempty"`
	CityId       int32  `protobuf:"varint,19,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	CityName     string `protobuf:"bytes,20,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	DistrictId   int32  `protobuf:"varint,21,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	DistrictName string `protobuf:"bytes,22,opt,name=district_name,json=districtName,proto3" json:"district_name,omitempty"`
	VillageId    int64  `protobuf:"varint,23,opt,name=village_id,json=villageId,proto3" json:"village_id,omitempty"`
	VillageName  string `protobuf:"bytes,24,opt,name=village_name,json=villageName,proto3" json:"village_name,omitempty"`
	CreatedAt    string `protobuf:"bytes,25,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string `protobuf:"bytes,26,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt    string `protobuf:"bytes,27,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_store_service_store_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{21}
}

func (x *Address) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Address) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Address) GetStoreId() int64 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *Address) GetStoreCode() string {
	if x != nil {
		return x.StoreCode
	}
	return ""
}

func (x *Address) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *Address) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Address) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *Address) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Address) GetPicName() string {
	if x != nil {
		return x.PicName
	}
	return ""
}

func (x *Address) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Address) GetIsMain() int32 {
	if x != nil {
		return x.IsMain
	}
	return 0
}

func (x *Address) GetIsWarehouse() int32 {
	if x != nil {
		return x.IsWarehouse
	}
	return 0
}

func (x *Address) GetGLat() string {
	if x != nil {
		return x.GLat
	}
	return ""
}

func (x *Address) GetGLng() string {
	if x != nil {
		return x.GLng
	}
	return ""
}

func (x *Address) GetGPlaceId() string {
	if x != nil {
		return x.GPlaceId
	}
	return ""
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Address) GetProvinceId() int32 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *Address) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *Address) GetCityId() int32 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *Address) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Address) GetDistrictId() int32 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *Address) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *Address) GetVillageId() int64 {
	if x != nil {
		return x.VillageId
	}
	return 0
}

func (x *Address) GetVillageName() string {
	if x != nil {
		return x.VillageName
	}
	return ""
}

func (x *Address) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Address) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Address) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type GetStoresAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStoresAllRequest) Reset() {
	*x = GetStoresAllRequest{}
	mi := &file_store_service_store_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoresAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoresAllRequest) ProtoMessage() {}

func (x *GetStoresAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoresAllRequest.ProtoReflect.Descriptor instead.
func (*GetStoresAllRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{22}
}

type GetStoresAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*StoreResponse    `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Error      *StoreErrorResponse `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	StatusCode int32               `protobuf:"varint,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *GetStoresAllResponse) Reset() {
	*x = GetStoresAllResponse{}
	mi := &file_store_service_store_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoresAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoresAllResponse) ProtoMessage() {}

func (x *GetStoresAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoresAllResponse.ProtoReflect.Descriptor instead.
func (*GetStoresAllResponse) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{23}
}

func (x *GetStoresAllResponse) GetData() []*StoreResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetStoresAllResponse) GetError() *StoreErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetStoresAllResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type GetProspectStoreActiveCountByAgentIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentIds []int64 `protobuf:"varint,1,rep,packed,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
}

func (x *GetProspectStoreActiveCountByAgentIDsRequest) Reset() {
	*x = GetProspectStoreActiveCountByAgentIDsRequest{}
	mi := &file_store_service_store_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProspectStoreActiveCountByAgentIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProspectStoreActiveCountByAgentIDsRequest) ProtoMessage() {}

func (x *GetProspectStoreActiveCountByAgentIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProspectStoreActiveCountByAgentIDsRequest.ProtoReflect.Descriptor instead.
func (*GetProspectStoreActiveCountByAgentIDsRequest) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{24}
}

func (x *GetProspectStoreActiveCountByAgentIDsRequest) GetAgentIds() []int64 {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

type GetProspectStoreActiveCountByAgentIDsResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId int64 `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Total   int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetProspectStoreActiveCountByAgentIDsResponseItem) Reset() {
	*x = GetProspectStoreActiveCountByAgentIDsResponseItem{}
	mi := &file_store_service_store_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProspectStoreActiveCountByAgentIDsResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProspectStoreActiveCountByAgentIDsResponseItem) ProtoMessage() {}

func (x *GetProspectStoreActiveCountByAgentIDsResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProspectStoreActiveCountByAgentIDsResponseItem.ProtoReflect.Descriptor instead.
func (*GetProspectStoreActiveCountByAgentIDsResponseItem) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{25}
}

func (x *GetProspectStoreActiveCountByAgentIDsResponseItem) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *GetProspectStoreActiveCountByAgentIDsResponseItem) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetProspectStoreActiveCountByAgentIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*GetProspectStoreActiveCountByAgentIDsResponseItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	StatusCode int32                                                `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Error      *StoreErrorResponse                                  `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetProspectStoreActiveCountByAgentIDsResponse) Reset() {
	*x = GetProspectStoreActiveCountByAgentIDsResponse{}
	mi := &file_store_service_store_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProspectStoreActiveCountByAgentIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProspectStoreActiveCountByAgentIDsResponse) ProtoMessage() {}

func (x *GetProspectStoreActiveCountByAgentIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_service_store_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProspectStoreActiveCountByAgentIDsResponse.ProtoReflect.Descriptor instead.
func (*GetProspectStoreActiveCountByAgentIDsResponse) Descriptor() ([]byte, []int) {
	return file_store_service_store_proto_rawDescGZIP(), []int{26}
}

func (x *GetProspectStoreActiveCountByAgentIDsResponse) GetData() []*GetProspectStoreActiveCountByAgentIDsResponseItem {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetProspectStoreActiveCountByAgentIDsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetProspectStoreActiveCountByAgentIDsResponse) GetError() *StoreErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_store_service_store_proto protoreflect.FileDescriptor

var file_store_service_store_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x67, 0x72, 0x70,
	0x63, 0x73, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b,
	0x6f, 0x44, 0x42, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd8, 0x04, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x6f, 0x46, 0x6f, 0x72, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x44, 0x42, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61,
	0x69, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x65, 0x6e, 0x67, 0x61, 0x6a, 0x75, 0x61, 0x6e, 0x54, 0x6f, 0x6b, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x22, 0x92, 0x0b, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x67, 0x61, 0x6a, 0x75, 0x61, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65,
	0x6e, 0x67, 0x61, 0x6a, 0x75, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x4c, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x5f, 0x6c, 0x6e, 0x67, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x4c, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x42, 0x4f, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x44, 0x42, 0x4f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64,
	0x62, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x44, 0x62, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x31, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x31, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x32, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x32,
	0x12, 0x29, 0x0a, 0x10, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x79, 0x65, 0x61, 0x72,
	0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x5f, 0x6e, 0x70, 0x77, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x4e, 0x70, 0x77, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x76, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x8e, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x56, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x49, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x49, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x76, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6f, 0x0a, 0x1c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x1d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x43, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x46, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9d, 0x15, 0x0a, 0x05, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x13, 0x0a, 0x05, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x4c, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x5f, 0x6c, 0x6e, 0x67, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x4c, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x31, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x31, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x32,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x33, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x33, 0x12, 0x29, 0x0a, 0x10,
	0x79, 0x65, 0x61, 0x72, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x79, 0x65, 0x61, 0x72, 0x45, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x4f, 0x66, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x6e, 0x70, 0x77, 0x70, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x4e, 0x70, 0x77, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x70, 0x77, 0x70, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x70, 0x77, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x70,
	0x5f, 0x73, 0x69, 0x75, 0x70, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x70, 0x53,
	0x69, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x75,
	0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x62, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x64, 0x62, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x41, 0x70, 0x70, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x70, 0x65, 0x6e, 0x67, 0x61, 0x6a, 0x75, 0x61, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x6e, 0x67, 0x61, 0x6a, 0x75,
	0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x64, 0x62, 0x6f, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x44, 0x62, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x15,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x19,
	0x73, 0x6a, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x73, 0x6a, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x1d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x12, 0x38,
	0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x64, 0x5f, 0x6b,
	0x66, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x64, 0x4b, 0x66, 0x12, 0x20, 0x0a,
	0x0c, 0x6b, 0x66, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x66, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x66, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x66, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x4d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x91, 0x06, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69,
	0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x5f,
	0x6c, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x4c, 0x61, 0x74, 0x12,
	0x13, 0x0a, 0x05, 0x67, 0x5f, 0x6c, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x4c, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x15, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x2c, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xcf, 0x01, 0x0a,
	0x2d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x94,
	0x0b, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x45, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x28, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x73, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x6f, 0x44,
	0x42, 0x4f, 0x12, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x54, 0x6f, 0x6b, 0x6f, 0x44, 0x42, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x65, 0x6e, 0x67, 0x61, 0x6a, 0x75, 0x61, 0x6e, 0x54, 0x6f,
	0x6b, 0x6f, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x50, 0x65, 0x6e, 0x67, 0x61, 0x6a, 0x75, 0x61, 0x6e, 0x54, 0x6f, 0x6b, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x79, 0x49, 0x44, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x6f, 0x44, 0x42, 0x4f, 0x46, 0x6f, 0x72,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x12, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x6f, 0x46, 0x6f, 0x72, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x44, 0x42, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x1a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94,
	0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x33, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_store_service_store_proto_rawDescOnce sync.Once
	file_store_service_store_proto_rawDescData = file_store_service_store_proto_rawDesc
)

func file_store_service_store_proto_rawDescGZIP() []byte {
	file_store_service_store_proto_rawDescOnce.Do(func() {
		file_store_service_store_proto_rawDescData = protoimpl.X.CompressGZIP(file_store_service_store_proto_rawDescData)
	})
	return file_store_service_store_proto_rawDescData
}

var file_store_service_store_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_store_service_store_proto_goTypes = []any{
	(*GetStoreByIDRequest)(nil),                               // 0: grpcs.GetStoreByIDRequest
	(*GetStoreByStoreCodeRequest)(nil),                        // 1: grpcs.GetStoreByStoreCodeRequest
	(*GetStoreByIDAndAgentIDRequest)(nil),                     // 2: grpcs.GetStoreByIDAndAgentIDRequest
	(*GetAllTokoDBORequest)(nil),                              // 3: grpcs.GetAllTokoDBORequest
	(*GetAllTokoForSalesmanDBORequest)(nil),                   // 4: grpcs.GetAllTokoForSalesmanDBORequest
	(*GetAllPengajuanTokoRequest)(nil),                        // 5: grpcs.GetAllPengajuanTokoRequest
	(*StoreResponse)(nil),                                     // 6: grpcs.StoreResponse
	(*StoreErrorResponse)(nil),                                // 7: grpcs.StoreErrorResponse
	(*GetStoreResponse)(nil),                                  // 8: grpcs.GetStoreResponse
	(*GetStoresResponse)(nil),                                 // 9: grpcs.GetStoresResponse
	(*GetIsMatchStoreAndAgentRequest)(nil),                    // 10: grpcs.GetIsMatchStoreAndAgentRequest
	(*GetIsMatchStoreAndAgentResponse)(nil),                   // 11: grpcs.GetIsMatchStoreAndAgentResponse
	(*GetStoreByStoreAliasCodeFromMappingStoreRequest)(nil),   // 12: grpcs.GetStoreByStoreAliasCodeFromMappingStoreRequest
	(*CheckBlacklistedStoreRequest)(nil),                      // 13: grpcs.CheckBlacklistedStoreRequest
	(*CheckBlacklistedStoreResponse)(nil),                     // 14: grpcs.CheckBlacklistedStoreResponse
	(*GetStoreByIDsRequest)(nil),                              // 15: grpcs.GetStoreByIDsRequest
	(*GetStoreByIDsWithoutAgentRequest)(nil),                  // 16: grpcs.GetStoreByIDsWithoutAgentRequest
	(*GetStoreByIDsResponse)(nil),                             // 17: grpcs.GetStoreByIDsResponse
	(*GetAllStoreByIDsRequest)(nil),                           // 18: grpcs.GetAllStoreByIDsRequest
	(*GetAllStoreByIDsResponse)(nil),                          // 19: grpcs.GetAllStoreByIDsResponse
	(*Store)(nil),                                             // 20: grpcs.Store
	(*Address)(nil),                                           // 21: grpcs.Address
	(*GetStoresAllRequest)(nil),                               // 22: grpcs.GetStoresAllRequest
	(*GetStoresAllResponse)(nil),                              // 23: grpcs.GetStoresAllResponse
	(*GetProspectStoreActiveCountByAgentIDsRequest)(nil),      // 24: grpcs.GetProspectStoreActiveCountByAgentIDsRequest
	(*GetProspectStoreActiveCountByAgentIDsResponseItem)(nil), // 25: grpcs.GetProspectStoreActiveCountByAgentIDsResponseItem
	(*GetProspectStoreActiveCountByAgentIDsResponse)(nil),     // 26: grpcs.GetProspectStoreActiveCountByAgentIDsResponse
}
var file_store_service_store_proto_depIdxs = []int32{
	6,  // 0: grpcs.GetStoreResponse.data:type_name -> grpcs.StoreResponse
	7,  // 1: grpcs.GetStoreResponse.error:type_name -> grpcs.StoreErrorResponse
	6,  // 2: grpcs.GetStoresResponse.data:type_name -> grpcs.StoreResponse
	7,  // 3: grpcs.GetStoresResponse.error:type_name -> grpcs.StoreErrorResponse
	7,  // 4: grpcs.GetIsMatchStoreAndAgentResponse.error:type_name -> grpcs.StoreErrorResponse
	7,  // 5: grpcs.CheckBlacklistedStoreResponse.error:type_name -> grpcs.StoreErrorResponse
	20, // 6: grpcs.GetStoreByIDsResponse.data:type_name -> grpcs.Store
	7,  // 7: grpcs.GetStoreByIDsResponse.error:type_name -> grpcs.StoreErrorResponse
	20, // 8: grpcs.GetAllStoreByIDsResponse.data:type_name -> grpcs.Store
	7,  // 9: grpcs.GetAllStoreByIDsResponse.error:type_name -> grpcs.StoreErrorResponse
	21, // 10: grpcs.Store.addresses:type_name -> grpcs.Address
	6,  // 11: grpcs.GetStoresAllResponse.data:type_name -> grpcs.StoreResponse
	7,  // 12: grpcs.GetStoresAllResponse.error:type_name -> grpcs.StoreErrorResponse
	25, // 13: grpcs.GetProspectStoreActiveCountByAgentIDsResponse.data:type_name -> grpcs.GetProspectStoreActiveCountByAgentIDsResponseItem
	7,  // 14: grpcs.GetProspectStoreActiveCountByAgentIDsResponse.error:type_name -> grpcs.StoreErrorResponse
	0,  // 15: grpcs.StoreService.GetStoreByID:input_type -> grpcs.GetStoreByIDRequest
	1,  // 16: grpcs.StoreService.GetStoreByStoreCode:input_type -> grpcs.GetStoreByStoreCodeRequest
	12, // 17: grpcs.StoreService.GetStoreByStoreAliasCodeFromMappingStore:input_type -> grpcs.GetStoreByStoreAliasCodeFromMappingStoreRequest
	2,  // 18: grpcs.StoreService.GetStoreByIDAndAgentID:input_type -> grpcs.GetStoreByIDAndAgentIDRequest
	10, // 19: grpcs.StoreService.GetIsMatchStoreAndAgent:input_type -> grpcs.GetIsMatchStoreAndAgentRequest
	3,  // 20: grpcs.StoreService.GetAllTokoDBO:input_type -> grpcs.GetAllTokoDBORequest
	5,  // 21: grpcs.StoreService.GetAllPengajuanToko:input_type -> grpcs.GetAllPengajuanTokoRequest
	13, // 22: grpcs.StoreService.CheckBlacklistedStore:input_type -> grpcs.CheckBlacklistedStoreRequest
	15, // 23: grpcs.StoreService.GetStoreByIDs:input_type -> grpcs.GetStoreByIDsRequest
	16, // 24: grpcs.StoreService.GetStoreByIDsWithoutAgent:input_type -> grpcs.GetStoreByIDsWithoutAgentRequest
	0,  // 25: grpcs.StoreService.GetStoreVisitationByID:input_type -> grpcs.GetStoreByIDRequest
	4,  // 26: grpcs.StoreService.GetAllTokoDBOForSalesman:input_type -> grpcs.GetAllTokoForSalesmanDBORequest
	22, // 27: grpcs.StoreService.GetStoresAll:input_type -> grpcs.GetStoresAllRequest
	18, // 28: grpcs.StoreService.GetAllStoreByIDs:input_type -> grpcs.GetAllStoreByIDsRequest
	24, // 29: grpcs.StoreService.GetProspectStoreActiveCountByAgentIDs:input_type -> grpcs.GetProspectStoreActiveCountByAgentIDsRequest
	8,  // 30: grpcs.StoreService.GetStoreByID:output_type -> grpcs.GetStoreResponse
	8,  // 31: grpcs.StoreService.GetStoreByStoreCode:output_type -> grpcs.GetStoreResponse
	8,  // 32: grpcs.StoreService.GetStoreByStoreAliasCodeFromMappingStore:output_type -> grpcs.GetStoreResponse
	8,  // 33: grpcs.StoreService.GetStoreByIDAndAgentID:output_type -> grpcs.GetStoreResponse
	11, // 34: grpcs.StoreService.GetIsMatchStoreAndAgent:output_type -> grpcs.GetIsMatchStoreAndAgentResponse
	9,  // 35: grpcs.StoreService.GetAllTokoDBO:output_type -> grpcs.GetStoresResponse
	9,  // 36: grpcs.StoreService.GetAllPengajuanToko:output_type -> grpcs.GetStoresResponse
	14, // 37: grpcs.StoreService.CheckBlacklistedStore:output_type -> grpcs.CheckBlacklistedStoreResponse
	17, // 38: grpcs.StoreService.GetStoreByIDs:output_type -> grpcs.GetStoreByIDsResponse
	17, // 39: grpcs.StoreService.GetStoreByIDsWithoutAgent:output_type -> grpcs.GetStoreByIDsResponse
	8,  // 40: grpcs.StoreService.GetStoreVisitationByID:output_type -> grpcs.GetStoreResponse
	9,  // 41: grpcs.StoreService.GetAllTokoDBOForSalesman:output_type -> grpcs.GetStoresResponse
	23, // 42: grpcs.StoreService.GetStoresAll:output_type -> grpcs.GetStoresAllResponse
	19, // 43: grpcs.StoreService.GetAllStoreByIDs:output_type -> grpcs.GetAllStoreByIDsResponse
	26, // 44: grpcs.StoreService.GetProspectStoreActiveCountByAgentIDs:output_type -> grpcs.GetProspectStoreActiveCountByAgentIDsResponse
	30, // [30:45] is the sub-list for method output_type
	15, // [15:30] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_store_service_store_proto_init() }
func file_store_service_store_proto_init() {
	if File_store_service_store_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_store_service_store_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_store_service_store_proto_goTypes,
		DependencyIndexes: file_store_service_store_proto_depIdxs,
		MessageInfos:      file_store_service_store_proto_msgTypes,
	}.Build()
	File_store_service_store_proto = out.File
	file_store_service_store_proto_rawDesc = nil
	file_store_service_store_proto_goTypes = nil
	file_store_service_store_proto_depIdxs = nil
}
