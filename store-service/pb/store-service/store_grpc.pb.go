// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: store-service/store.proto

package grpc_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StoreService_GetStoreByID_FullMethodName                             = "/grpcs.StoreService/GetStoreByID"
	StoreService_GetStoreByStoreCode_FullMethodName                      = "/grpcs.StoreService/GetStoreByStoreCode"
	StoreService_GetStoreByStoreAliasCodeFromMappingStore_FullMethodName = "/grpcs.StoreService/GetStoreByStoreAliasCodeFromMappingStore"
	StoreService_GetStoreByIDAndAgentID_FullMethodName                   = "/grpcs.StoreService/GetStoreByIDAndAgentID"
	StoreService_GetIsMatchStoreAndAgent_FullMethodName                  = "/grpcs.StoreService/GetIsMatchStoreAndAgent"
	StoreService_GetAllTokoDBO_FullMethodName                            = "/grpcs.StoreService/GetAllTokoDBO"
	StoreService_GetAllPengajuanToko_FullMethodName                      = "/grpcs.StoreService/GetAllPengajuanToko"
	StoreService_CheckBlacklistedStore_FullMethodName                    = "/grpcs.StoreService/CheckBlacklistedStore"
	StoreService_GetStoreByIDs_FullMethodName                            = "/grpcs.StoreService/GetStoreByIDs"
	StoreService_GetStoreByIDsWithoutAgent_FullMethodName                = "/grpcs.StoreService/GetStoreByIDsWithoutAgent"
	StoreService_GetStoreVisitationByID_FullMethodName                   = "/grpcs.StoreService/GetStoreVisitationByID"
	StoreService_GetAllTokoDBOForSalesman_FullMethodName                 = "/grpcs.StoreService/GetAllTokoDBOForSalesman"
	StoreService_GetStoresAll_FullMethodName                             = "/grpcs.StoreService/GetStoresAll"
	StoreService_GetAllStoreByIDs_FullMethodName                         = "/grpcs.StoreService/GetAllStoreByIDs"
	StoreService_GetProspectStoreActiveCountByAgentIDs_FullMethodName    = "/grpcs.StoreService/GetProspectStoreActiveCountByAgentIDs"
)

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreServiceClient interface {
	GetStoreByID(ctx context.Context, in *GetStoreByIDRequest, opts ...grpc.CallOption) (*GetStoreResponse, error)
	GetStoreByStoreCode(ctx context.Context, in *GetStoreByStoreCodeRequest, opts ...grpc.CallOption) (*GetStoreResponse, error)
	GetStoreByStoreAliasCodeFromMappingStore(ctx context.Context, in *GetStoreByStoreAliasCodeFromMappingStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error)
	GetStoreByIDAndAgentID(ctx context.Context, in *GetStoreByIDAndAgentIDRequest, opts ...grpc.CallOption) (*GetStoreResponse, error)
	GetIsMatchStoreAndAgent(ctx context.Context, in *GetIsMatchStoreAndAgentRequest, opts ...grpc.CallOption) (*GetIsMatchStoreAndAgentResponse, error)
	GetAllTokoDBO(ctx context.Context, in *GetAllTokoDBORequest, opts ...grpc.CallOption) (*GetStoresResponse, error)
	GetAllPengajuanToko(ctx context.Context, in *GetAllPengajuanTokoRequest, opts ...grpc.CallOption) (*GetStoresResponse, error)
	CheckBlacklistedStore(ctx context.Context, in *CheckBlacklistedStoreRequest, opts ...grpc.CallOption) (*CheckBlacklistedStoreResponse, error)
	GetStoreByIDs(ctx context.Context, in *GetStoreByIDsRequest, opts ...grpc.CallOption) (*GetStoreByIDsResponse, error)
	GetStoreByIDsWithoutAgent(ctx context.Context, in *GetStoreByIDsWithoutAgentRequest, opts ...grpc.CallOption) (*GetStoreByIDsResponse, error)
	GetStoreVisitationByID(ctx context.Context, in *GetStoreByIDRequest, opts ...grpc.CallOption) (*GetStoreResponse, error)
	GetAllTokoDBOForSalesman(ctx context.Context, in *GetAllTokoForSalesmanDBORequest, opts ...grpc.CallOption) (*GetStoresResponse, error)
	GetStoresAll(ctx context.Context, in *GetStoresAllRequest, opts ...grpc.CallOption) (*GetStoresAllResponse, error)
	GetAllStoreByIDs(ctx context.Context, in *GetAllStoreByIDsRequest, opts ...grpc.CallOption) (*GetAllStoreByIDsResponse, error)
	GetProspectStoreActiveCountByAgentIDs(ctx context.Context, in *GetProspectStoreActiveCountByAgentIDsRequest, opts ...grpc.CallOption) (*GetProspectStoreActiveCountByAgentIDsResponse, error)
}

type storeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceClient(cc grpc.ClientConnInterface) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) GetStoreByID(ctx context.Context, in *GetStoreByIDRequest, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoreByStoreCode(ctx context.Context, in *GetStoreByStoreCodeRequest, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreByStoreCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoreByStoreAliasCodeFromMappingStore(ctx context.Context, in *GetStoreByStoreAliasCodeFromMappingStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreByStoreAliasCodeFromMappingStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoreByIDAndAgentID(ctx context.Context, in *GetStoreByIDAndAgentIDRequest, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreByIDAndAgentID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetIsMatchStoreAndAgent(ctx context.Context, in *GetIsMatchStoreAndAgentRequest, opts ...grpc.CallOption) (*GetIsMatchStoreAndAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIsMatchStoreAndAgentResponse)
	err := c.cc.Invoke(ctx, StoreService_GetIsMatchStoreAndAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetAllTokoDBO(ctx context.Context, in *GetAllTokoDBORequest, opts ...grpc.CallOption) (*GetStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoresResponse)
	err := c.cc.Invoke(ctx, StoreService_GetAllTokoDBO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetAllPengajuanToko(ctx context.Context, in *GetAllPengajuanTokoRequest, opts ...grpc.CallOption) (*GetStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoresResponse)
	err := c.cc.Invoke(ctx, StoreService_GetAllPengajuanToko_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) CheckBlacklistedStore(ctx context.Context, in *CheckBlacklistedStoreRequest, opts ...grpc.CallOption) (*CheckBlacklistedStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckBlacklistedStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_CheckBlacklistedStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoreByIDs(ctx context.Context, in *GetStoreByIDsRequest, opts ...grpc.CallOption) (*GetStoreByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreByIDsResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoreByIDsWithoutAgent(ctx context.Context, in *GetStoreByIDsWithoutAgentRequest, opts ...grpc.CallOption) (*GetStoreByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreByIDsResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreByIDsWithoutAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoreVisitationByID(ctx context.Context, in *GetStoreByIDRequest, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreVisitationByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetAllTokoDBOForSalesman(ctx context.Context, in *GetAllTokoForSalesmanDBORequest, opts ...grpc.CallOption) (*GetStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoresResponse)
	err := c.cc.Invoke(ctx, StoreService_GetAllTokoDBOForSalesman_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoresAll(ctx context.Context, in *GetStoresAllRequest, opts ...grpc.CallOption) (*GetStoresAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoresAllResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoresAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetAllStoreByIDs(ctx context.Context, in *GetAllStoreByIDsRequest, opts ...grpc.CallOption) (*GetAllStoreByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllStoreByIDsResponse)
	err := c.cc.Invoke(ctx, StoreService_GetAllStoreByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetProspectStoreActiveCountByAgentIDs(ctx context.Context, in *GetProspectStoreActiveCountByAgentIDsRequest, opts ...grpc.CallOption) (*GetProspectStoreActiveCountByAgentIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProspectStoreActiveCountByAgentIDsResponse)
	err := c.cc.Invoke(ctx, StoreService_GetProspectStoreActiveCountByAgentIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceServer is the server API for StoreService service.
// All implementations should embed UnimplementedStoreServiceServer
// for forward compatibility.
type StoreServiceServer interface {
	GetStoreByID(context.Context, *GetStoreByIDRequest) (*GetStoreResponse, error)
	GetStoreByStoreCode(context.Context, *GetStoreByStoreCodeRequest) (*GetStoreResponse, error)
	GetStoreByStoreAliasCodeFromMappingStore(context.Context, *GetStoreByStoreAliasCodeFromMappingStoreRequest) (*GetStoreResponse, error)
	GetStoreByIDAndAgentID(context.Context, *GetStoreByIDAndAgentIDRequest) (*GetStoreResponse, error)
	GetIsMatchStoreAndAgent(context.Context, *GetIsMatchStoreAndAgentRequest) (*GetIsMatchStoreAndAgentResponse, error)
	GetAllTokoDBO(context.Context, *GetAllTokoDBORequest) (*GetStoresResponse, error)
	GetAllPengajuanToko(context.Context, *GetAllPengajuanTokoRequest) (*GetStoresResponse, error)
	CheckBlacklistedStore(context.Context, *CheckBlacklistedStoreRequest) (*CheckBlacklistedStoreResponse, error)
	GetStoreByIDs(context.Context, *GetStoreByIDsRequest) (*GetStoreByIDsResponse, error)
	GetStoreByIDsWithoutAgent(context.Context, *GetStoreByIDsWithoutAgentRequest) (*GetStoreByIDsResponse, error)
	GetStoreVisitationByID(context.Context, *GetStoreByIDRequest) (*GetStoreResponse, error)
	GetAllTokoDBOForSalesman(context.Context, *GetAllTokoForSalesmanDBORequest) (*GetStoresResponse, error)
	GetStoresAll(context.Context, *GetStoresAllRequest) (*GetStoresAllResponse, error)
	GetAllStoreByIDs(context.Context, *GetAllStoreByIDsRequest) (*GetAllStoreByIDsResponse, error)
	GetProspectStoreActiveCountByAgentIDs(context.Context, *GetProspectStoreActiveCountByAgentIDsRequest) (*GetProspectStoreActiveCountByAgentIDsResponse, error)
}

// UnimplementedStoreServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoreServiceServer struct{}

func (UnimplementedStoreServiceServer) GetStoreByID(context.Context, *GetStoreByIDRequest) (*GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreByID not implemented")
}
func (UnimplementedStoreServiceServer) GetStoreByStoreCode(context.Context, *GetStoreByStoreCodeRequest) (*GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreByStoreCode not implemented")
}
func (UnimplementedStoreServiceServer) GetStoreByStoreAliasCodeFromMappingStore(context.Context, *GetStoreByStoreAliasCodeFromMappingStoreRequest) (*GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreByStoreAliasCodeFromMappingStore not implemented")
}
func (UnimplementedStoreServiceServer) GetStoreByIDAndAgentID(context.Context, *GetStoreByIDAndAgentIDRequest) (*GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreByIDAndAgentID not implemented")
}
func (UnimplementedStoreServiceServer) GetIsMatchStoreAndAgent(context.Context, *GetIsMatchStoreAndAgentRequest) (*GetIsMatchStoreAndAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIsMatchStoreAndAgent not implemented")
}
func (UnimplementedStoreServiceServer) GetAllTokoDBO(context.Context, *GetAllTokoDBORequest) (*GetStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTokoDBO not implemented")
}
func (UnimplementedStoreServiceServer) GetAllPengajuanToko(context.Context, *GetAllPengajuanTokoRequest) (*GetStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPengajuanToko not implemented")
}
func (UnimplementedStoreServiceServer) CheckBlacklistedStore(context.Context, *CheckBlacklistedStoreRequest) (*CheckBlacklistedStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBlacklistedStore not implemented")
}
func (UnimplementedStoreServiceServer) GetStoreByIDs(context.Context, *GetStoreByIDsRequest) (*GetStoreByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreByIDs not implemented")
}
func (UnimplementedStoreServiceServer) GetStoreByIDsWithoutAgent(context.Context, *GetStoreByIDsWithoutAgentRequest) (*GetStoreByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreByIDsWithoutAgent not implemented")
}
func (UnimplementedStoreServiceServer) GetStoreVisitationByID(context.Context, *GetStoreByIDRequest) (*GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreVisitationByID not implemented")
}
func (UnimplementedStoreServiceServer) GetAllTokoDBOForSalesman(context.Context, *GetAllTokoForSalesmanDBORequest) (*GetStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTokoDBOForSalesman not implemented")
}
func (UnimplementedStoreServiceServer) GetStoresAll(context.Context, *GetStoresAllRequest) (*GetStoresAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoresAll not implemented")
}
func (UnimplementedStoreServiceServer) GetAllStoreByIDs(context.Context, *GetAllStoreByIDsRequest) (*GetAllStoreByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStoreByIDs not implemented")
}
func (UnimplementedStoreServiceServer) GetProspectStoreActiveCountByAgentIDs(context.Context, *GetProspectStoreActiveCountByAgentIDsRequest) (*GetProspectStoreActiveCountByAgentIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProspectStoreActiveCountByAgentIDs not implemented")
}
func (UnimplementedStoreServiceServer) testEmbeddedByValue() {}

// UnsafeStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceServer will
// result in compilation errors.
type UnsafeStoreServiceServer interface {
	mustEmbedUnimplementedStoreServiceServer()
}

func RegisterStoreServiceServer(s grpc.ServiceRegistrar, srv StoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StoreService_ServiceDesc, srv)
}

func _StoreService_GetStoreByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreByID(ctx, req.(*GetStoreByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoreByStoreCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreByStoreCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreByStoreCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreByStoreCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreByStoreCode(ctx, req.(*GetStoreByStoreCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoreByStoreAliasCodeFromMappingStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreByStoreAliasCodeFromMappingStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreByStoreAliasCodeFromMappingStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreByStoreAliasCodeFromMappingStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreByStoreAliasCodeFromMappingStore(ctx, req.(*GetStoreByStoreAliasCodeFromMappingStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoreByIDAndAgentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreByIDAndAgentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreByIDAndAgentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreByIDAndAgentID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreByIDAndAgentID(ctx, req.(*GetStoreByIDAndAgentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetIsMatchStoreAndAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIsMatchStoreAndAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetIsMatchStoreAndAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetIsMatchStoreAndAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetIsMatchStoreAndAgent(ctx, req.(*GetIsMatchStoreAndAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetAllTokoDBO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTokoDBORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetAllTokoDBO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetAllTokoDBO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetAllTokoDBO(ctx, req.(*GetAllTokoDBORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetAllPengajuanToko_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPengajuanTokoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetAllPengajuanToko(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetAllPengajuanToko_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetAllPengajuanToko(ctx, req.(*GetAllPengajuanTokoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_CheckBlacklistedStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBlacklistedStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).CheckBlacklistedStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_CheckBlacklistedStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).CheckBlacklistedStore(ctx, req.(*CheckBlacklistedStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoreByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreByIDs(ctx, req.(*GetStoreByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoreByIDsWithoutAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreByIDsWithoutAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreByIDsWithoutAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreByIDsWithoutAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreByIDsWithoutAgent(ctx, req.(*GetStoreByIDsWithoutAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoreVisitationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreVisitationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreVisitationByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreVisitationByID(ctx, req.(*GetStoreByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetAllTokoDBOForSalesman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTokoForSalesmanDBORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetAllTokoDBOForSalesman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetAllTokoDBOForSalesman_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetAllTokoDBOForSalesman(ctx, req.(*GetAllTokoForSalesmanDBORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoresAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoresAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoresAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoresAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoresAll(ctx, req.(*GetStoresAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetAllStoreByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStoreByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetAllStoreByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetAllStoreByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetAllStoreByIDs(ctx, req.(*GetAllStoreByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetProspectStoreActiveCountByAgentIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProspectStoreActiveCountByAgentIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetProspectStoreActiveCountByAgentIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetProspectStoreActiveCountByAgentIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetProspectStoreActiveCountByAgentIDs(ctx, req.(*GetProspectStoreActiveCountByAgentIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreService_ServiceDesc is the grpc.ServiceDesc for StoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcs.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStoreByID",
			Handler:    _StoreService_GetStoreByID_Handler,
		},
		{
			MethodName: "GetStoreByStoreCode",
			Handler:    _StoreService_GetStoreByStoreCode_Handler,
		},
		{
			MethodName: "GetStoreByStoreAliasCodeFromMappingStore",
			Handler:    _StoreService_GetStoreByStoreAliasCodeFromMappingStore_Handler,
		},
		{
			MethodName: "GetStoreByIDAndAgentID",
			Handler:    _StoreService_GetStoreByIDAndAgentID_Handler,
		},
		{
			MethodName: "GetIsMatchStoreAndAgent",
			Handler:    _StoreService_GetIsMatchStoreAndAgent_Handler,
		},
		{
			MethodName: "GetAllTokoDBO",
			Handler:    _StoreService_GetAllTokoDBO_Handler,
		},
		{
			MethodName: "GetAllPengajuanToko",
			Handler:    _StoreService_GetAllPengajuanToko_Handler,
		},
		{
			MethodName: "CheckBlacklistedStore",
			Handler:    _StoreService_CheckBlacklistedStore_Handler,
		},
		{
			MethodName: "GetStoreByIDs",
			Handler:    _StoreService_GetStoreByIDs_Handler,
		},
		{
			MethodName: "GetStoreByIDsWithoutAgent",
			Handler:    _StoreService_GetStoreByIDsWithoutAgent_Handler,
		},
		{
			MethodName: "GetStoreVisitationByID",
			Handler:    _StoreService_GetStoreVisitationByID_Handler,
		},
		{
			MethodName: "GetAllTokoDBOForSalesman",
			Handler:    _StoreService_GetAllTokoDBOForSalesman_Handler,
		},
		{
			MethodName: "GetStoresAll",
			Handler:    _StoreService_GetStoresAll_Handler,
		},
		{
			MethodName: "GetAllStoreByIDs",
			Handler:    _StoreService_GetAllStoreByIDs_Handler,
		},
		{
			MethodName: "GetProspectStoreActiveCountByAgentIDs",
			Handler:    _StoreService_GetProspectStoreActiveCountByAgentIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store-service/store.proto",
}
